
@article{wu_isbrecommendationdefinitions_2005,
	title = {{ISB} recommendation on definitions of joint coordinate systems of various joints for the reporting of human joint motion - Part {II}: shoulder, elbow, wrist and hand},
	volume = {38},
	issn = {00219290},
	doi = {10.1016/j.jbiomech.2004.05.042},
	abstract = {In this communication, the Standardization and Terminology Committee ({STC}) of the International Society of Biomechanics proposes a definition of a joint coordinate system ({JCS}) for the shoulder, elbow, wrist, and hand. For each joint, a standard for the local axis system in each articulating segment or bone is generated. These axes then standardize the {JCS}. The {STC} is publishing these recommendations so as to encourage their use, to stimulate feedback and discussion, and to facilitate further revisions. Adopting these standards will lead to better communication among researchers and clinicians. © 2004 Elsevier Ltd. All rights reserved.},
	pages = {981--992},
	number = {5},
	journaltitle = {Journal of Biomechanics},
	author = {Wu, Ge and Van Der Helm, Frans C T and Veeger, H. E J DirkJan and Makhsous, Mohsen and Van Roy, Peter and Anglin, Carolyn and Nagels, Jochem and Karduna, Andrew R and McQuade, Kevin and Wang, Xuguang and Werner, Frederick W and Buchholz, Bryan and {Others}},
	date = {2005},
	pmid = {15844264},
	keywords = {Shoulder, Elbow, Hand, Joint coordinate system, Wrist},
	file = {Wu et al_2005_ISB recommendation on definitions of joint coordinate systems of various joints.pdf:/Users/felix/Zotero/storage/HNVERNGE/Wu et al_2005_ISB recommendation on definitions of joint coordinate systems of various joints.pdf:application/pdf}
}

@article{martinez_pyomecaopensourceframework_2020,
	title = {pyomeca: An Open-Source Framework for Biomechanical Analysis},
	volume = {5},
	issn = {2475-9066},
	url = {https://joss.theoj.org/papers/10.21105/joss.02431},
	doi = {10.21105/joss.02431},
	shorttitle = {pyomeca},
	pages = {2431},
	number = {53},
	journaltitle = {Journal of Open Source Software},
	author = {Martinez, Romain and Michaud, Benjamin and Begon, Mickael},
	urldate = {2020-12-02},
	date = {2020-09-03},
	langid = {english},
	file = {Martinez et al_2020_pyomeca.pdf:/Users/felix/Zotero/storage/G8K9SJMM/Martinez et al_2020_pyomeca.pdf:application/pdf}
}

@article{dixon_biomechzooopensourcetoolbox_2017,
	title = {{biomechZoo}: An open-source toolbox for the processing, analysis, and visualization of biomechanical movement data},
	volume = {140},
	issn = {01692607},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0169260716304424},
	doi = {10.1016/j.cmpb.2016.11.007},
	shorttitle = {{biomechZoo}},
	pages = {1--10},
	journaltitle = {Computer Methods and Programs in Biomedicine},
	shortjournal = {Computer Methods and Programs in Biomedicine},
	author = {Dixon, Philippe C. and Loh, Jonathan J. and Michaud-Paquette, Yannick and Pearsall, David J.},
	urldate = {2021-05-25},
	date = {2017-03},
	langid = {english},
	file = {Dixon et al. - 2017 - biomechZoo An open-source toolbox for the process.pdf:/Users/felix/Zotero/storage/HWZWLSHB/Dixon et al. - 2017 - biomechZoo An open-source toolbox for the process.pdf:application/pdf}
}

@article{michaud_biorbdpythonmatlab_2021,
	title = {biorbd: A C++, Python and {MATLAB} library to analyze and simulate the human body biomechanics},
	volume = {6},
	issn = {2475-9066},
	url = {https://joss.theoj.org/papers/10.21105/joss.02562},
	doi = {10.21105/joss.02562},
	shorttitle = {biorbd},
	abstract = {Biomechanics is at the interface of several fields of science, such as mechanics, human physiology and robotics. Although this transdisciplinarity encourages the emergence of new ideas, the variety of data to analyze simultaneously can be overwhelming. Commonly biomechanical datasets are composed of skin markers trajectories (termed as markers), contact forces, electromyography ({EMG}) signal, inertial measurement units ({IMU}) kinematics, etc., which by nature are not straightforward to combine. It is at their meeting point—the body movement—that biorbd steps in; bio standing for biomechanics and rbd for rigid body dynamics. biorbd is a feature-based development library that targets the manipulation of biomechanical data in a comprehensive and accessible manner. For a given musculoskeletal model, it provides functions for inverse flow—i.e., from markers to {EMG}—and direct flow—i.e., from {EMG} to markers.},
	pages = {2562},
	number = {57},
	journaltitle = {Journal of Open Source Software},
	shortjournal = {{JOSS}},
	author = {Michaud, Benjamin and Begon, Mickaël},
	urldate = {2021-05-26},
	date = {2021-01-19},
	langid = {english},
	file = {Michaud and Begon - 2021 - biorbd A C++, Python and MATLAB library to analyz.pdf:/Users/felix/Zotero/storage/27PIWMJF/Michaud and Begon - 2021 - biorbd A C++, Python and MATLAB library to analyz.pdf:application/pdf}
}

@inproceedings{carpentier_pinocchiolibraryfast_2019,
	location = {Paris, France},
	title = {The Pinocchio C++ library : A fast and flexible implementation of rigid body dynamics algorithms and their analytical derivatives},
	isbn = {978-1-5386-3615-2},
	url = {https://ieeexplore.ieee.org/document/8700380/},
	doi = {10.1109/SII.2019.8700380},
	shorttitle = {The Pinocchio C++ library},
	abstract = {We introduce Pinocchio, an open-source software framework that implements rigid body dynamics algorithms and their analytical derivatives. Pinocchio does not only include standard algorithms employed in robotics (e.g., forward and inverse dynamics) but provides additional features essential for the control, the planning and the simulation of robots. In this paper, we describe these features and detail the programming patterns and design which make Pinocchio efﬁcient. We evaluate the performances against {RBDL}, another framework with broad dissemination inside the robotics community. We also demonstrate how the source code generation embedded in Pinocchio outperforms other approaches of state of the art.},
	eventtitle = {2019 {IEEE}/{SICE} International Symposium on System Integration ({SII})},
	pages = {614--619},
	booktitle = {2019 {IEEE}/{SICE} International Symposium on System Integration ({SII})},
	publisher = {{IEEE}},
	author = {Carpentier, Justin and Saurel, Guilhem and Buondonno, Gabriele and Mirabel, Joseph and Lamiraux, Florent and Stasse, Olivier and Mansard, Nicolas},
	urldate = {2021-05-26},
	date = {2019-01},
	langid = {english},
	file = {Carpentier et al. - 2019 - The Pinocchio C++ library  A fast and flexible im.pdf:/Users/felix/Zotero/storage/GR934NH2/Carpentier et al. - 2019 - The Pinocchio C++ library  A fast and flexible im.pdf:application/pdf}
}

@article{cleather_developmentsegmentbasedmusculoskeletal_2015,
	title = {The development of a segment-based musculoskeletal model of the lower limb: introducing {FreeBody}},
	volume = {2},
	issn = {2054-5703},
	url = {https://royalsocietypublishing.org/doi/10.1098/rsos.140449},
	doi = {10.1098/rsos.140449},
	shorttitle = {The development of a segment-based musculoskeletal model of the lower limb},
	abstract = {Traditional approaches to the biomechanical analysis of movement are joint-based; that is the mechanics of the body are described in terms of the forces and moments acting at the joints, and that muscular forces are considered to create moments about the joints. We have recently shown that segment-based approaches, where the mechanics of the body are described by considering the effect of the muscle, ligament and joint contact forces on the segments themselves, can also prove insightful. We have also previously described a simultaneous, optimization-based, musculoskeletal model of the lower limb. However, this prior model incorporates both joint- and segment-based assumptions. The purpose of this study was therefore to develop an entirely segment-based model of the lower limb and to compare its performance to our previous work. The segment-based model was used to estimate the muscle forces found during vertical jumping, which were in turn compared with the muscular activations that have been found in vertical jumping, by using a Geers' metric to quantify the magnitude and phase errors. The segment-based model was shown to have a similar ability to estimate muscle forces as a model based upon our previous work. In the future, we will evaluate the ability of the segment-based model to be used to provide results with clinical relevance, and compare its performance to joint-based approaches. The segment-based model described in this article is publicly available as a {GUI}-based M
              atlab
              ® application and in the original source code (at
              www.msksoftware.org.uk
              ).},
	pages = {140449},
	number = {6},
	journaltitle = {Royal Society Open Science},
	shortjournal = {R. Soc. open sci.},
	author = {Cleather, Daniel J. and Bull, Anthony M. J.},
	urldate = {2021-05-26},
	date = {2015-06},
	langid = {english},
	file = {Cleather and Bull - 2015 - The development of a segment-based musculoskeletal.pdf:/Users/felix/Zotero/storage/KC9Z8AWV/Cleather and Bull - 2015 - The development of a segment-based musculoskeletal.pdf:application/pdf}
}

@article{seth_opensimsimulatingmusculoskeletal_2018,
	title = {{OpenSim}: Simulating musculoskeletal dynamics and neuromuscular control to study human and animal movement},
	volume = {14},
	issn = {1553-7358},
	url = {https://dx.plos.org/10.1371/journal.pcbi.1006223},
	doi = {10.1371/journal.pcbi.1006223},
	shorttitle = {{OpenSim}},
	pages = {e1006223},
	number = {7},
	journaltitle = {{PLOS} Computational Biology},
	shortjournal = {{PLoS} Comput Biol},
	author = {Seth, Ajay and Hicks, Jennifer L. and Uchida, Thomas K. and Habib, Ayman and Dembia, Christopher L. and Dunne, James J. and Ong, Carmichael F. and {DeMers}, Matthew S. and Rajagopal, Apoorva and Millard, Matthew and Hamner, Samuel R. and Arnold, Edith M. and Yong, Jennifer R. and Lakshmikanth, Shrinidhi K. and Sherman, Michael A. and Ku, Joy P. and Delp, Scott L.},
	editor = {Schneidman, Dina},
	urldate = {2021-05-26},
	date = {2018-07-26},
	langid = {english},
	file = {Seth et al. - 2018 - OpenSim Simulating musculoskeletal dynamics and n.pdf:/Users/felix/Zotero/storage/44IX4H2B/Seth et al. - 2018 - OpenSim Simulating musculoskeletal dynamics and n.pdf:application/pdf}
}

@article{sherman_simbodymultibodydynamics_2011,
	title = {Simbody: multibody dynamics for biomedical research},
	volume = {2},
	issn = {22109838},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S2210983811000241},
	doi = {10.1016/j.piutam.2011.04.023},
	shorttitle = {Simbody},
	abstract = {Multibody software designed for mechanical engineering has been successfully employed in biomedical research for many years. For real time operation some biomedical researchers have also adapted game physics engines. However, these tools were built for other purposes and do not fully address the needs of biomedical researchers using them to analyze the dynamics of biological structures and make clinically meaningful recommendations. We are addressing this problem through the development of an open source, extensible, high performance toolkit including a multibody mechanics library aimed at the needs of biomedical researchers. The resulting code, Simbody, supports research in a variety of fields including neuromuscular, prosthetic, and biomolecular simulation, and related research such as biologically-inspired design and control of humanoid robots and avatars. Simbody is the dynamics engine behind {OpenSim}, a widely used biomechanics simulation application. This article reviews issues that arise uniquely in biomedical research, and reports on the architecture, theory, and computational methods Simbody uses to address them. By addressing these needs explicitly Simbody provides a better match to the needs of researchers than can be obtained by adaptation of mechanical engineering or gaming codes. Simbody is a community resource, free for any purpose. We encourage wide adoption and invite contributions to the code base at https://simtk.org/home/simbody.},
	pages = {241--261},
	journaltitle = {Procedia {IUTAM}},
	shortjournal = {Procedia {IUTAM}},
	author = {Sherman, Michael A. and Seth, Ajay and Delp, Scott L.},
	urldate = {2021-05-26},
	date = {2011},
	langid = {english},
	file = {Sherman et al. - 2011 - Simbody multibody dynamics for biomedical researc.pdf:/Users/felix/Zotero/storage/TA73MFGY/Sherman et al. - 2011 - Simbody multibody dynamics for biomedical researc.pdf:application/pdf}
}

@article{muller_custommatlabtoolbox_2019,
	title = {{CusToM}: a Matlab toolbox for musculoskeletal simulation},
	volume = {4},
	issn = {2475-9066},
	url = {http://joss.theoj.org/papers/10.21105/joss.00927},
	doi = {10.21105/joss.00927},
	shorttitle = {{CusToM}},
	abstract = {Customizable Toolbox for Musculoskeletal simulation ({CusToM}) is a {MATLAB} toolbox aimed at performing inverse-dynamics-based musculoskeletal analyses (Erdemir, {McLean}, Herzog, \& Bogert, 2007). This type of analysis is essential to access mechanical quantities of human motion in different fields such as clinics, ergonomics and sports. {CusToM} exhibits several features. It can generate a personalized musculoskeletal model, and can solve from motion-capture data inverse kinematics, external forces estimation, inverse dynamics and muscle forces estimation problems as in various musculoskeletal simulation software (Damsgaard, Rasmussen, Christensen, Surma, \& Zee, 2006; Delp et al., 2007) (Figure 1).},
	pages = {927},
	number = {33},
	journaltitle = {Journal of Open Source Software},
	shortjournal = {{JOSS}},
	author = {Muller, Antoine and Pontonnier, Charles and Puchaud, Pierre and Dumont, Georges},
	urldate = {2021-05-26},
	date = {2019-01-21},
	langid = {english},
	file = {Muller et al. - 2019 - CusToM a Matlab toolbox for musculoskeletal simul.pdf:/Users/felix/Zotero/storage/II4R5533/Muller et al. - 2019 - CusToM a Matlab toolbox for musculoskeletal simul.pdf:application/pdf}
}

@report{michaud_bioptimpythonframework_2021,
	title = {Bioptim, a Python framework for Musculoskeletal Optimal Control in Biomechanics},
	url = {http://biorxiv.org/lookup/doi/10.1101/2021.02.27.432868},
	abstract = {Musculoskeletal simulations are useful in biomechanics to investigate the causes of movement disorder, to estimate non-measurable physiological quantities or to study the optimality of human movement. We introduce Bioptim, an easy-to-use Python framework for biomechanical optimal control, handling musculoskeletal models. Relying on algorithmic differentiation and the multiple shooting formulation, Bioptim interfaces nonlinear solvers to quickly provide dynamically consistent optimal solutions. The software is both computationally efﬁcient (C++ core) and easily customizable, thanks to its Python interface. It allows to quickly deﬁne a variety of biomechanical problems such as motion tracking/prediction, muscle-driven simulations, parameters optimization, multiphase problems, etc. It is also intended for real-time applications such as moving horizon estimation and model predictive control. Six contrasting examples are presented, comprising various models, dynamics, objective functions and constraints. They include data-driven simulations (i.e., a multiphase muscle driven gait cycle and an upper-limb real-time moving horizon estimation of muscle forces) and predictive simulations (i.e., a muscle-driven pointing task, a twisting somersault with a quaternion-based model, a position controller using external forces, and a multiphase torque-driven maximum-height jump motion).},
	institution = {Bioengineering},
	type = {preprint},
	author = {Michaud, Benjamin and Bailly, François and Charbonneau, Eve and Ceglia, Amedeo and Sanchez, Léa and Begon, Mickael},
	urldate = {2021-05-26},
	date = {2021-02-27},
	langid = {english},
	doi = {10.1101/2021.02.27.432868},
	file = {Michaud et al. - 2021 - Bioptim, a Python framework for Musculoskeletal Op.pdf:/Users/felix/Zotero/storage/H4PXDM4F/Michaud et al. - 2021 - Bioptim, a Python framework for Musculoskeletal Op.pdf:application/pdf}
}

@article{michaud_ezc3deasyc3d_2021,
	title = {ezc3d: An easy C3D file I/O cross-platform solution for C++, Python and {MATLAB}},
	volume = {6},
	issn = {2475-9066},
	url = {https://joss.theoj.org/papers/10.21105/joss.02911},
	doi = {10.21105/joss.02911},
	shorttitle = {ezc3d},
	abstract = {This work introduces the open source ezc3d library which provides a light and comprehensive {API} to easily read and write c3d files. The C++ core provides a fast file I/O library, and convenient {MATLAB} and Python3 interfaces are also provided so researchers can smoothly implement ezc3d in their current workflow. It supports c3d files from the main biomechanics software, namely: Vicon, Qualisys, Optotrak, {BTS} and {XSens}. In addition, since the c3d standard allows for multiple ways to store force platform data, a force platform analysis module is provided. The main feature of this module is to express forces and moments in more common reference frames—that is, expressed in the global reference frame calculated at either the origin or at the centre of pressure—so they can be directly interpreted by the user.},
	pages = {2911},
	number = {58},
	journaltitle = {Journal of Open Source Software},
	shortjournal = {{JOSS}},
	author = {Michaud, Benjamin and Begon, Mickaël},
	urldate = {2021-05-26},
	date = {2021-02-21},
	langid = {english},
	file = {Michaud and Begon - 2021 - ezc3d An easy C3D file IO cross-platform solutio.pdf:/Users/felix/Zotero/storage/XITZQLVU/Michaud and Begon - 2021 - ezc3d An easy C3D file IO cross-platform solutio.pdf:application/pdf}
}

@article{harris_arrayprogrammingnumpy_2020,
	title = {Array programming with {NumPy}},
	volume = {585},
	issn = {0028-0836, 1476-4687},
	url = {http://www.nature.com/articles/s41586-020-2649-2},
	doi = {10.1038/s41586-020-2649-2},
	abstract = {Abstract
            
              Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. {NumPy} is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, {NumPy} was an important part of the software stack used in the discovery of gravitational waves
              1
              and in the first imaging of a black hole
              2
              . Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. {NumPy} is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own {NumPy}-like interfaces and array objects. Owing to its central position in the ecosystem, {NumPy} increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface ({API}), provides a flexible framework to support the next decade of scientific and industrial analysis.},
	pages = {357--362},
	number = {7825},
	journaltitle = {Nature},
	shortjournal = {Nature},
	author = {Harris, Charles R. and Millman, K. Jarrod and van der Walt, Stéfan J. and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J. and Kern, Robert and Picus, Matti and Hoyer, Stephan and van Kerkwijk, Marten H. and Brett, Matthew and Haldane, Allan and del Río, Jaime Fernández and Wiebe, Mark and Peterson, Pearu and Gérard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E.},
	urldate = {2021-05-26},
	date = {2020-09-17},
	langid = {english},
	file = {Harris et al. - 2020 - Array programming with NumPy.pdf:/Users/felix/Zotero/storage/6YDHJLPW/Harris et al. - 2020 - Array programming with NumPy.pdf:application/pdf}
}

@article{mckinney_pandasfoundationalpython_2011,
	title = {pandas: a Foundational Python Library for Data Analysis and Statistics},
	volume = {14},
	abstract = {In this paper we will discuss pandas, a Python library of rich data structures and tools for working with structured data sets common to statistics, ﬁnance, social sciences, and many other ﬁelds. The library provides integrated, intuitive routines for performing common data manipulations and analysis on such data sets. It aims to be the foundational layer for the future of statistical computing in Python. It serves as a strong complement to the existing scientiﬁc Python stack while implementing and improving upon the kinds of data manipulation tools found in other statistical programming languages such as R. In addition to detailing its design and features of pandas, we will discuss future avenues of work and growth opportunities for statistics and data analysis applications in the Python language.},
	pages = {9},
	number = {9},
	journaltitle = {Python for High Performance and Scientific Computing},
	author = {{McKinney}, Wes},
	date = {2011},
	langid = {english},
	file = {McKinney - pandas a Foundational Python Library for Data Ana.pdf:/Users/felix/Zotero/storage/AFR43TRZ/McKinney - pandas a Foundational Python Library for Data Ana.pdf:application/pdf}
}

@article{hoyer_xarrayndlabeled_2017,
	title = {xarray: N-D labeled Arrays and Datasets in Python},
	volume = {5},
	issn = {2049-9647},
	url = {http://openresearchsoftware.metajnl.com/articles/10.5334/jors.148/},
	doi = {10.5334/jors.148},
	shorttitle = {xarray},
	pages = {10},
	journaltitle = {Journal of Open Research Software},
	author = {Hoyer, Stephan and Hamman, Joseph J.},
	urldate = {2021-05-26},
	date = {2017-04-05},
	langid = {english},
	file = {Hoyer and Hamman - 2017 - xarray N-D labeled Arrays and Datasets in Python.pdf:/Users/felix/Zotero/storage/C4MU9R3E/Hoyer and Hamman - 2017 - xarray N-D labeled Arrays and Datasets in Python.pdf:application/pdf}
}

@article{hunter_matplotlib2dgraphics_2007,
	title = {Matplotlib: A 2D Graphics Environment},
	volume = {9},
	issn = {1521-9615},
	url = {http://ieeexplore.ieee.org/document/4160265/},
	doi = {10.1109/MCSE.2007.55},
	shorttitle = {Matplotlib},
	pages = {90--95},
	number = {3},
	journaltitle = {Computing in Science \& Engineering},
	shortjournal = {Comput. Sci. Eng.},
	author = {Hunter, John D.},
	urldate = {2021-05-26},
	date = {2007},
	langid = {english},
	file = {Hunter - 2007 - Matplotlib A 2D Graphics Environment.pdf:/Users/felix/Zotero/storage/J9BS3LSY/Hunter - 2007 - Matplotlib A 2D Graphics Environment.pdf:application/pdf}
}

@article{virtanen_scipyfundamentalalgorithms_2020,
	title = {{SciPy} 1.0: fundamental algorithms for scientific computing in Python},
	volume = {17},
	issn = {1548-7091, 1548-7105},
	url = {http://www.nature.com/articles/s41592-019-0686-2},
	doi = {10.1038/s41592-019-0686-2},
	shorttitle = {{SciPy} 1.0},
	abstract = {Abstract
            {SciPy} is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, {SciPy} has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of {SciPy} 1.0 and highlight some recent technical developments.},
	pages = {261--272},
	number = {3},
	journaltitle = {Nature Methods},
	shortjournal = {Nat Methods},
	author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, Stéfan J. and Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C J and Polat, İlhan and Feng, Yu and Moore, Eric W. and {VanderPlas}, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and Harris, Charles R. and Archibald, Anne M. and Ribeiro, Antônio H. and Pedregosa, Fabian and van Mulbregt, Paul},
	urldate = {2021-05-26},
	date = {2020-03},
	langid = {english},
	file = {SciPy 1.0 Contributors et al. - 2020 - SciPy 1.0 fundamental algorithms for scientific c.pdf:/Users/felix/Zotero/storage/WGEPQ4IE/SciPy 1.0 Contributors et al. - 2020 - SciPy 1.0 fundamental algorithms for scientific c.pdf:application/pdf}
}

@incollection{fangohr_comparisonmatlabpython_2004,
	location = {Berlin, Heidelberg},
	title = {A Comparison of C, {MATLAB}, and Python as Teaching Languages in Engineering},
	volume = {3039},
	isbn = {978-3-540-22129-6 978-3-540-25944-2},
	url = {http://link.springer.com/10.1007/978-3-540-25944-2_157},
	abstract = {We describe and compare the programming languages C, {MATLAB} and Python as teaching languages for engineering students. We distinguish between two distinct phases in the process of converting a given problem into a computer program that can provide a solution: (i) ﬁnding an algorithmic solution and (ii) implementing this in a particular programming language. It is argued that it is most important for the understanding of the students to perform the ﬁrst step whereas the actual implementation in a programming language is of secondary importance for the learning of problem-solving techniques. We therefore suggest to chose a well-structured teaching language that provides a clear and intuitive syntax and allows students to quickly express their algorithms. In our experience in engineering computing we ﬁnd that {MATLAB} is much better suited than C for this task but the best choice in terms of clarity and functionality of the language is provided by Python.},
	pages = {1210--1217},
	booktitle = {Computational Science - {ICCS} 2004},
	publisher = {Springer Berlin Heidelberg},
	author = {Fangohr, Hans},
	editor = {Bubak, Marian and van Albada, Geert Dick and Sloot, Peter M. A. and Dongarra, Jack},
	editorb = {Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard},
	editorbtype = {redactor},
	urldate = {2021-10-09},
	date = {2004},
	langid = {english},
	doi = {10.1007/978-3-540-25944-2_157},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Fangohr - 2004 - A Comparison of C, MATLAB, and Python as Teaching .pdf:/Users/felix/Zotero/storage/M9MTVPET/Fangohr - 2004 - A Comparison of C, MATLAB, and Python as Teaching .pdf:application/pdf}
}